{"version":3,"sources":["components/Notification/Notification.jsx","components/Statistics/Statistics.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Section/Section .jsx","App.js","index.js"],"names":["Notification","message","className","prototype","PropTypes","string","isRequired","Statistics","title","options","total","positivePercentage","Object","entries","map","option","object","number","FeedbackOptions","onLeaveFeedback","keys","elm","type","name","onClick","Section","children","App","state","good","neutral","bad","handleIncrement","event","target","setState","prevState","this","Math","round","countTotalFeedback","countPositiveFeedbackPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uQAEMA,EAAe,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACnB,mBAAGC,UAAU,qBAAb,SAAmCD,KAGrCD,EAAaG,UAAY,CACvBF,QAASG,IAAUC,OAAOC,YAGbN,QCNTO,EAAa,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,MAAOC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC3C,OACE,gCACE,6BAAKH,IACM,IAAVE,EACC,cAAC,EAAD,CAAcT,QAAQ,sBAEtB,+BACGW,OAAOC,QAAQJ,GAASK,KAAI,SAAAC,GAAM,OACjC,qBAAoBb,UAAU,aAA9B,UACGa,EAAO,GADV,KACgBA,EAAO,KADdA,EAAO,OAIlB,qBAAIb,UAAU,aAAd,oBAAmCQ,KACnC,qBAAIR,UAAU,aAAd,gCACsBS,EADtB,cASVJ,EAAWJ,UAAY,CACrBM,QAASL,IAAUY,OAAOV,WAC1BE,MAAOJ,IAAUC,OAAOC,WACxBI,MAAON,IAAUa,OAAOX,WACxBK,mBAAoBP,IAAUa,OAAOX,YAGxBC,QChCTW,EAAkB,SAAC,GAAkC,IAAhCT,EAA+B,EAA/BA,QAASU,EAAsB,EAAtBA,gBAClC,OACE,oBAAIjB,UAAU,mBAAd,SACGU,OAAOQ,KAAKX,GAASK,KAAI,SAAAO,GAAG,OAC3B,oBAAcnB,UAAU,mBAAxB,SACE,wBACEA,UAAU,qBACVoB,KAAK,SACLC,KAAMF,EACNG,QAASL,EAJX,SAMGE,KAPIA,SAejBH,EAAgBf,UAAY,CAC1BM,QAASL,IAAUY,OAAOV,YAEbY,QCtBTO,EAAU,SAAC,GAAyB,IAAvBjB,EAAsB,EAAtBA,MAAOkB,EAAe,EAAfA,SACxB,OACE,qCACE,6BAAKlB,IACJkB,MAKPD,EAAQtB,UAAY,CAClBK,MAAOJ,IAAUC,OAAOC,YAGXmB,QC+BAE,E,4MAvCbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,gBAAkB,SAACC,GACjB,IAAMV,EAAOU,EAAMC,OAAOX,KAC1B,EAAKY,UAAS,SAACC,GAAD,sBACXb,EAAOa,EAAUb,GAAQ,O,wDAI9B,WACE,MAA+Bc,KAAKT,MAGpC,OAHA,EAAQC,KAAR,EAAcC,QAAd,EAAuBC,M,6CAMzB,WACE,OAAOO,KAAKC,MAAyB,IAAlBF,KAAKT,MAAMC,KAAcQ,KAAKG,wB,oBAGnD,WACE,OACE,eAAC,EAAD,CAAShC,MAAM,wBAAf,UACE,cAAC,EAAD,CAAiBC,QAAS4B,KAAKT,MAAOT,gBAAiBkB,KAAKL,kBAC5D,cAAC,EAAD,CACExB,MAAM,aACNC,QAAS4B,KAAKT,MACdlB,MAAO2B,KAAKG,qBACZ7B,mBAAoB0B,KAAKI,2C,GAjCjBC,a,YCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.adf1a80f.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\r\n\r\nconst Notification = ({ message }) => (\r\n  <p className=\"text__notification\">{message}</p>\r\n);\r\n\r\nNotification.prototype = {\r\n  message: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Notification;\r\n","import PropTypes from 'prop-types';\r\n\r\nimport Notification from '../Notification';\r\n\r\nconst Statistics = ({ title, options, total, positivePercentage }) => {\r\n  return (\r\n    <div>\r\n      <h2>{title}</h2>\r\n      {total === 0 ? (\r\n        <Notification message=\"No feedback given\" />\r\n      ) : (\r\n        <ul>\r\n          {Object.entries(options).map(option => (\r\n            <li key={option[0]} className=\"Statistics\">\r\n              {option[0]}: {option[1]}\r\n            </li>\r\n          ))}\r\n          <li className=\"Statistics\">total: {total}</li>\r\n          <li className=\"Statistics\">\r\n            positive feedback: {positivePercentage}%\r\n          </li>\r\n        </ul>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nStatistics.prototype = {\r\n  options: PropTypes.object.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n};\r\n\r\nexport default Statistics;\r\n","import PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  return (\r\n    <ul className=\"Statistics__list\">\r\n      {Object.keys(options).map(elm => (\r\n        <li key={elm} className=\"Statistics__item\">\r\n          <button\r\n            className=\"Statistics__button\"\r\n            type=\"button\"\r\n            name={elm}\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {elm}\r\n          </button>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nFeedbackOptions.prototype = {\r\n  options: PropTypes.object.isRequired,\r\n};\r\nexport default FeedbackOptions;\r\n","import PropTypes from \"prop-types\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </>\r\n  );\r\n};\r\n\r\nSection.prototype = {\r\n  title: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default Section;\r\n","import { Component } from \"react\";\n\nimport Statistics from \"./components/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Section from \"./components/Section\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleIncrement = (event) => {\n    const name = event.target.name;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n\n  countTotalFeedback() {\n    const { good, neutral, bad } = this.state;\n    const totalFeedback = good + neutral + bad;\n\n    return totalFeedback;\n  }\n\n  countPositiveFeedbackPercentage() {\n    return Math.round((this.state.good * 100) / this.countTotalFeedback());\n  }\n\n  render() {\n    return (\n      <Section title=\"Please leave feedback\">\n        <FeedbackOptions options={this.state} onLeaveFeedback={this.handleIncrement} />\n        <Statistics\n          title=\"Statistics\"\n          options={this.state}\n          total={this.countTotalFeedback()}\n          positivePercentage={this.countPositiveFeedbackPercentage()}\n        />\n      </Section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'modern-normalize/modern-normalize.css';\nimport './styles/base.scss';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}